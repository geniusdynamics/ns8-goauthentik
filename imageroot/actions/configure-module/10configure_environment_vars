#!/usr/bin/env python3

#
# Copyright (C) 2022 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-3.0-or-later
#

import json
import sys
import agent

# Try to parse the stdin as JSON.
# If parsing fails, output everything to stderr
data = json.load(sys.stdin)

# Set Authentik Email Configuration
rdb = agent.redis_connect(use_replica=True)
smtp_settings = agent.get_smarthost_settings(rdb)

SMTP_HOST = smtp_settings['host']
SMTP_PORT = smtp_settings['port']
SMTP_USERNAME = smtp_settings['username']
SMTP_PASSWORD = smtp_settings['password']
SMTP_ENCRYPT = smtp_settings['encrypt_smtp']
SMTP_TLS_VERIFY = '1' if smtp_settings['tls_verify'] else ''

goauthentik_config = {
    "AUTHENTIK_EMAIL__HOST": SMTP_HOST,
    "AUTHENTIK_EMAIL__PORT": SMTP_PORT,
    "AUTHENTIK_EMAIL__USERNAME": SMTP_USERNAME,
    "AUTHENTIK_EMAIL__PASSWORD": SMTP_PASSWORD,
    "AUTHENTIK_EMAIL__USE_TLS": SMTP_ENCRYPT,
    "AUTHENTIK_EMAIL__TIMEOUT": "5",
    "AUTHENTIK_EMAIL__FROM": f'<Authentik>{SMTP_USERNAME}'
}
agent.write_envfile("goauthnetik.env", goauthentik_config)

#Docker Expose Ports 
COMPOSE_PORT_HTTP=data.get("COMPOSE_PORT_HTTP", 80)
COMPOSE_PORT_HTTPS=data.get("COMPOSE_PORT_HTTPS", 443)


agent.set_env("COMPOSE_PORT_HTTP", COMPOSE_PORT_HTTP)
agent.set_env("COMPOSE_PORT_HTTPS", COMPOSE_PORT_HTTPS)
#paperless CSRF settings
# agent.set_env("PAPERLESS_URL", PAPERLESS_URL)


# Make sure everything is saved inside the environment file
# just before starting systemd unit
agent.dump_env()
